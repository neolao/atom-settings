# Your keymap
#
# Atom keymaps work similarly to stylesheets. Just as stylesheets use selectors
# to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# '.editor':
#   'enter': 'editor:newline'
#
# '.workspace':
#   'ctrl-P': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
'.editor':
    'cmd-up': 'editor:move-line-up'
    'cmd-down': 'editor:move-line-down'
    'cmd-d': 'editor:delete-line'
    'alt-cmd-down': 'editor:duplicate-lines'
    'alt-cmd-space': 'autocomplete-plus:activate'
    'alt-ctrl-space': 'autocomplete-plus:activate'

'.platform-darwin .editor':
    'cmd-d': 'editor:delete-line'
    'alt-cmd-down': 'editor:duplicate-lines'
    
# Confirmer une autocompletion avec Enter
".autocomplete-plus input.hidden-input":
    "enter": "autocomplete-plus:confirm"
    
# Bug bizarre avec Docblockr
#'.editor:not(.mini)':
#  'enter': 'docblockr:parse-inline'
#  'shift-enter': 'docblockr:parse-enter'
